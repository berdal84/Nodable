#pragma once

#include "nodable/core/assertions.h"
#include "nodable/core/types.h"
#include "type.h"
#include "typeregister.h"
#include "registration.h"
#include "MACROS.h"

namespace Nodable
{
    /**
     * set a value to an union member
     */
    template<typename U, typename T> void set_union(U& instance, T value)
    {
        T& member = U::template get<T>(instance);
        member = value;
    }

     /**
     * get a union member value
     */
     template<typename T, typename U> T& get_union(U& instance)
    {
        return U::template get<T>(instance);
    }

     /**
     * get a union member value
     */
     template<typename T, typename U> const T& get_union(const U& instance)
    {
        return U::template get<T>(instance);
    }

    template<class target_t, class source_t>
    static target_t* cast(source_t *_source)
    {
        if( _source->get_type().is_child_of( type::get<target_t>(), true ))
        {
            return dynamic_cast<target_t*>(_source);
        }
        return nullptr;
    }

    static void reflect_log_statistics();
} // namespace Nodable



