require "fileutils"
require "rbconfig"

########################################################################################################################

print RbConfig::CONFIG['target_os']

BUILD_OS           = RbConfig::CONFIG['build_os']
HOST_OS            = RbConfig::CONFIG['host_os']
TARGET_OS          = RbConfig::CONFIG['target_os']
BUILD_TYPE         = ENV["BUILD_TYPE"]      || "release"
BUILD_DIR          = ENV["BUILD_DIR"]       || "./rake-build-#{BUILD_TYPE}"
BINARY_DIR         = ENV["BINARY_DIR"]      || "./rake-out-#{BUILD_TYPE}"
OBJ_DIR            = ENV["OBJ_DIR"]         || "#{BUILD_DIR}/obj"

########################################################################################################################

namespace :shared do
    def new_project(_name)
    	{
    	   name:          _name,
           sources:       FileList[],
           objects:       FileList[],
           includes:      FileList[
               "src",
               "src/gui",
               "src/tools",
               "libs",
               "libs/whereami/src",
               "libs/imgui",
               "libs/imgui",
               "libs/glm",
               "libs/gl3w/GL",
               "libs/gl3w",
               "libs/SDL/include",
               "libs/IconFontCppHeaders",
               "libs/nativefiledialog-extended/src/include",
               "libs/cpptrace",
               "libs/freetype/include",
               "/usr/include/X11/mesa/GL"
           ],
           defines: {
               "IMGUI_USER_CONFIG": "\"tools/gui/ImGuiExConfig.h\"" # extend ImVec2 and ImVec4 constructors & more..
           },
           c_flags: [
           ],
           cxx_flags: [
           ],
           linker_flags: [
                "`pkg-config --cflags --libs gtk+-3.0`",
                "`pkg-config --cflags --libs freetype2`",
                "`sdl2-config --cflags --libs`",
                "-l:libnfd.a",
                "-lGL",
                "-lcpptrace -ldwarf -lz -lzstd -ldl", # https://github.com/jeremy-rifkin/cpptrace?tab=readme-ov-file#use-without-cmake
           ],
           c_compiler:   "clang",
           cxx_compiler: "clang++",
           assets: FileList['assets/**/*']
        }
    end

    def compile_objects(project)

        # Generate object list
        project[:objects] = project[:sources].map{|src| src_to_obj(src)}

        # each obj depends on its src tasks
        project[:objects].each_with_index do |obj, index|
            src = project[:sources][index]
            file obj => src do
                compile_file( src, obj, project)
            end
        end

        project[:objects]
    end

    def src_to_obj(src_file)
    	"#{OBJ_DIR}/#{src_file.ext("o")}"
    end

    def make_executable( project )
        objects      = project[:objects].join(" ")
        binary       = "#{BUILD_DIR}/#{project[:name]}"
        linker_flags = project[:linker_flags].join(" ")
        system "rm -rf #{BUILD_DIR}/assets"
        system "cp -r assets #{BUILD_DIR}"
        system "clang++ -o #{binary} #{objects} -Llibs/nativefiledialog-extended/build/src #{project[:linker_flags].join(" ")} -v"
    end

    def compile_file(src_file, obj_file, project)
    	puts "Compiling #{src_file} ..."
    	FileUtils.mkdir_p File.dirname(obj_file)

        includes = project[:includes].map{|path| "-I#{path}"}.join(" ")
        defines  = project[:defines].map{|key,value| "-D#{key}='#{value}'" }.join(" ") # we add '' because "" are removed by the terminal

        if ( project[:c_compiler] != "clang" )
            raise "Not implemented"
        end
        if ( project[:cxx_compiler] != "clang++" )
            raise "Not implemented"
        end

        flags = [
            "-c", # obj only
            "-Wfatal-errors",
            #"-pedantic"
        ].join(" ")

        flags_cxx    = [
            "--std=c++20",
            "-fno-char8_t"
        ].join(" ")

        has_cxx_extension = [
            ".cpp",
            ".cc"
        ].include? File.extname( src_file )

        if has_cxx_extension
            system "#{project[:cxx_compiler]} #{flags} #{flags_cxx} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
        else
            system "#{project[:c_compiler]} #{flags} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
        end
    end

    def check_os_support()
        if not system "clang --version"
            raise "clang compiler is required, please install an retry."
        end
    end
end # namespace shared

########################################################################################################################

check_os_support()

task :default => :help

desc "says hello"
task :help do
	print("Welcome to Nodable's rakefile.\nFor more info, run: rake --tasks\n")
end

desc "Install dependencies"
task :check do
    print "Ruby version is: "
    system "ruby -v"
end

desc "Install dependencies"
task :install => :check do
    if BUILD_OS.include?("linux")
        system "sudo apt-get update && sudo apt-get install libegl1-mesa-dev libdbus-1-dev libgtk-3-dev" or raise "Unable to install packages"
    elsif BUILD_OS.include?("darwin")
        system "brew install mesalib-glw" or raise "Unable to install packages"
    else
        puts "No dependencies to install (or unsupported OS)"
    end
end

task :clean do
    if File.exists?(BUILD_DIR)
        FileUtils.remove_entry_secure BUILD_DIR
    end
    puts "Clean OK"
end

########################################################################################################################

namespace :libs do

    task :nfd => [] do
        commands = [
            "rm -rf libs/nativefiledialog-extended/build",
            'cd libs/nativefiledialog-extended',
            'mkdir -p build',
            'cd build',
            'cmake -DCMAKE_BUILD_TYPE=Release ..',
            'cmake --build .'
        ]
        system commands.join(" && ")
    end

    task :cpptrace => [] do
        commands = [
            "cd libs/cpptrace",
            "mkdir -p build && cd build",
            "cmake .. -DCMAKE_BUILD_TYPE=Release",
            "make -j",
            "sudo make install"
        ]
        system commands.join(" && ")
    end

    task :sdl => [] do
        commands = [
            'cd libs/SDL',
            'mkdir -p build',
            'cd build',
            '../configure',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end

    task :freetype => [] do
        commands = [
            'cd libs/freetype',
            'mkdir -p build && cd build',
            'cmake ..',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end
end # namespace libs

########################################################################################################################

tools_core = new_project("tools-core")
tools_core[:sources] |= FileList[
    "src/tools/core/reflection/qword.cpp",
    "src/tools/core/reflection/Type.cpp",
    "src/tools/core/reflection/TypeRegister.cpp",
    "src/tools/core/reflection/variant.cpp",
    #"src/tools/core/memory/pointers.cpp",
    "src/tools/core/EventManager.cpp",
    "src/tools/core/FileSystem.cpp",
    "src/tools/core/format.cpp",
    "src/tools/core/log.cpp",
    "src/tools/core/StateMachine.cpp",
    "src/tools/core/System.cpp",
    "src/tools/core/TaskManager.cpp",
    "libs/whereami/src/whereami.c"
]

gl3w = new_project("gl3w")
gl3w[:sources] |= FileList[
    "libs/gl3w/GL/gl3w.c"
]

lodepng = new_project("lodepng")
lodepng[:sources] |= FileList[
    "libs/lodepng/lodepng.cpp"
]

imgui = new_project("imgui")
imgui[:sources] |= FileList[
   "libs/imgui/imgui.cpp",
   "libs/imgui/imgui_demo.cpp",
   "libs/imgui/imgui_draw.cpp",
   "libs/imgui/imgui_tables.cpp",
   "libs/imgui/imgui_widgets.cpp",
   "libs/imgui/misc/freetype/imgui_freetype.cpp",
   "libs/imgui/backends/imgui_impl_sdl.cpp",
   "libs/imgui/backends/imgui_impl_opengl3.cpp",
]
imgui[:sources] |= Dir.glob("libs/freetype/src/**.{c,cpp}")

tools_gui = new_project("tools-gui")
tools_gui[:sources] |= FileList[
    "src/tools/gui/geometry/BezierCurveSegment2D.cpp",
    "src/tools/gui/geometry/BoxShape2D.cpp",
    "src/tools/gui/geometry/Rect.cpp",
    "src/tools/gui/geometry/SpatialNode2D.cpp",
    "src/tools/gui/geometry/TRSTransform2D.cpp",
    "src/tools/gui/Action.cpp",
    "src/tools/gui/ActionManager.cpp",
    "src/tools/gui/ActionManagerView.cpp",
    "src/tools/gui/App.cpp",
    "src/tools/gui/AppView.cpp",
    "src/tools/gui/Config.cpp",
    "src/tools/gui/FontManager.cpp",
    "src/tools/gui/ImGuiEx.cpp",
    "src/tools/gui/ViewState.cpp",
    "src/tools/gui/TextureManager.cpp",
]

tools_gui_example = new_project("tools-gui-example")
tools_gui_example[:sources] |= FileList[
    "src/tools/gui-example/AppExample.cpp",
    "src/tools/gui-example/AppExampleView.cpp",
    "src/tools/gui-example/main.cpp"
]

tools_gui_example[:sources] |= tools_core[:sources]
tools_gui_example[:sources] |= tools_gui[:sources]
tools_gui_example[:sources] |= gl3w[:sources]
tools_gui_example[:sources] |= lodepng[:sources]
tools_gui_example[:sources] |= imgui[:sources]

tools_gui_example[:includes] |= tools_core[:includes]
tools_gui_example[:includes] |= tools_gui[:includes]

namespace :tools do

    task :run => [] do
        sh "exec #{BUILD_DIR}/#{tools_gui_example[:name]}" or raise "error"
    end

    task :build => 'binary'

    task :binary => ['deps', 'objs'] do
        make_executable( tools_gui_example )
        puts "Build OK"
    end

    task :deps => [
        'libs:nfd',
        'libs:freetype',
        'libs:sdl',
        'libs:cpptrace'
    ]

    multitask :objs => compile_objects( tools_gui_example )
end

task :build => 'tools:build'
task :run => 'tools:run'