require "fileutils"
require "rbconfig"

########################################################################################################################

print RbConfig::CONFIG['target_os']

BUILD_OS           = RbConfig::CONFIG['build_os']
HOST_OS            = RbConfig::CONFIG['host_os']
TARGET_OS          = RbConfig::CONFIG['target_os']
BUILD_TYPE         = ENV["BUILD_TYPE"]      || "release"
BUILD_DIR          = ENV["BUILD_DIR"]       || "./rake-build-#{BUILD_TYPE}"
BINARY_DIR         = ENV["BINARY_DIR"]      || "./rake-out-#{BUILD_TYPE}"
OBJ_DIR            = ENV["OBJ_DIR"]         || "#{BUILD_DIR}/obj"
INSTALL_DIR       = ENV["INSTALL_DIR"]    || "./out"

########################################################################################################################

namespace :shared do
    def new_project(_name)
    	{
    	   name:          _name,
           sources:       FileList[],
           objects:       FileList[],
           includes:      FileList[
               "src",
               "src/gui",
               "src/tools",
               "libs",
               "libs/whereami/src",
               "libs/imgui",
               "libs/imgui",
               "libs/glm",
               "libs/gl3w/GL",
               "libs/gl3w",
               "libs/SDL/include",
               "libs/IconFontCppHeaders",
               "libs/nativefiledialog-extended/src/include",
               "libs/cpptrace",
               "libs/freetype/include",
               "/usr/include/X11/mesa/GL"
           ],
           defines: {
               "IMGUI_USER_CONFIG": "\"tools/gui/ImGuiExConfig.h\"" # extend ImVec2 and ImVec4 constructors & more..
           },
           c_flags: [
           ],
           cxx_flags: [
                "-O2"
           ],
           linker_flags: [
                "`pkg-config --cflags --libs gtk+-3.0`",
                "`pkg-config --cflags --libs freetype2`",
                "`sdl2-config --cflags --libs`",
                "-l:libnfd.a",
                "-lGL",
                "-lcpptrace -ldwarf -lz -lzstd -ldl", # https://github.com/jeremy-rifkin/cpptrace?tab=readme-ov-file#use-without-cmake
           ],
           c_compiler:   "clang",
           cxx_compiler: "clang++",
           asset_folder_path: "assets" # a single folder
        }
    end

    def compile_objects(project)

        # Generate object list
        project[:objects] = project[:sources].map{|src| src_to_obj(src)}

        # each obj depends on its src tasks
        project[:objects].each_with_index do |obj, index|
            src = project[:sources][index]
            file obj => src do
                compile_file( src, obj, project)
            end
        end

        project[:objects]
    end

    def copy_assets_to_build_dir( project )
        print "Copying assets..."
        commands = [
            "mkdir -p #{BUILD_DIR}/#{project[:asset_folder_path]}",
            "cp -r #{project[:asset_folder_path]}/** #{BUILD_DIR}/#{project[:asset_folder_path]}",
        ].join(" && ")
        system commands
    end

    def copy_build_to_install_dir( project )
        commands = [
            "mkdir -p #{INSTALL_DIR}",
            "cp -r #{BUILD_DIR}/#{project[:asset_folder_path]} #{BUILD_DIR}/#{project[:name]} #{INSTALL_DIR}", 
        ].join(" && ")
        system commands
    end

    def src_to_obj(src_file)
    	"#{OBJ_DIR}/#{src_file.ext("o")}"
    end

    def build_executable_binary( project )
        objects      = project[:objects].join(" ")
        binary       = "#{BUILD_DIR}/#{project[:name]}"
        linker_flags = project[:linker_flags].join(" ")
        system "clang++ -o #{binary} #{objects} -Llibs/nativefiledialog-extended/build/src #{project[:linker_flags].join(" ")} -v"
    end

    def compile_file(src_file, obj_file, project)
    	puts "Compiling #{src_file} ..."
    	FileUtils.mkdir_p File.dirname(obj_file)

        includes = project[:includes].map{|path| "-I#{path}"}.join(" ")
        defines  = project[:defines].map{|key,value| "-D#{key}='#{value}'" }.join(" ") # we add '' because "" are removed by the terminal

        if ( project[:c_compiler] != "clang" )
            raise "Not implemented"
        end
        if ( project[:cxx_compiler] != "clang++" )
            raise "Not implemented"
        end

        flags = [
            "-c", # obj only
            "-Wfatal-errors",
            #"-pedantic"
        ].join(" ")

        flags_cxx    = [
            "--std=c++20",
            "-fno-char8_t"
        ].join(" ")

        has_cxx_extension = [
            ".cpp",
            ".cc"
        ].include? File.extname( src_file )

        if has_cxx_extension
            system "#{project[:cxx_compiler]} #{flags} #{flags_cxx} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
        else
            system "#{project[:c_compiler]} #{flags} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
        end
    end

    def check_os_support()
        if not system "clang --version"
            raise "clang compiler is required, please install an retry."
        end
    end
end # namespace shared

########################################################################################################################

namespace :libs do

    task :build_all => [
        'nfd',
        'cpptrace',
        'sdl',
        'freetype'
    ]

    task :nfd => [] do
        commands = [
            "rm -rf libs/nativefiledialog-extended/build",
            'cd libs/nativefiledialog-extended',
            'mkdir -p build',
            'cd build',
            'cmake -DCMAKE_BUILD_TYPE=Release ..',
            'cmake --build .'
        ]
        system commands.join(" && ")
    end

    task :cpptrace => [] do
        commands = [
            "cd libs/cpptrace",
            "mkdir -p build && cd build",
            "cmake .. -DCMAKE_BUILD_TYPE=Release",
            "make -j",
            "sudo make install"
        ]
        system commands.join(" && ")
    end

    task :sdl => [] do
        commands = [
            'cd libs/SDL',
            'mkdir -p build',
            'cd build',
            '../configure',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end

    task :freetype => [] do
        commands = [
            'cd libs/freetype',
            'mkdir -p build && cd build',
            'cmake ..',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end
end # namespace libs

########################################################################################################################

tools_core = new_project("tools-core")
tools_core[:sources] |= FileList[
    "src/tools/core/reflection/qword.cpp",
    "src/tools/core/reflection/Type.cpp",
    "src/tools/core/reflection/TypeRegister.cpp",
    "src/tools/core/reflection/variant.cpp",
    #"src/tools/core/memory/pointers.cpp",
    "src/tools/core/EventManager.cpp",
    "src/tools/core/FileSystem.cpp",
    "src/tools/core/format.cpp",
    "src/tools/core/log.cpp",
    "src/tools/core/StateMachine.cpp",
    "src/tools/core/System.cpp",
    "src/tools/core/TaskManager.cpp",
    "libs/whereami/src/whereami.c"
]

gl3w = new_project("gl3w")
gl3w[:sources] |= FileList[
    "libs/gl3w/GL/gl3w.c"
]

texteditor = new_project("texteditor")
texteditor[:sources] |= FileList[
    "libs/ImGuiColorTextEdit/TextEditor.cpp"
]

lodepng = new_project("lodepng")
lodepng[:sources] |= FileList[
    "libs/lodepng/lodepng.cpp"
]

imgui = new_project("imgui")
imgui[:sources] |= FileList[
   "libs/imgui/imgui.cpp",
   "libs/imgui/imgui_demo.cpp",
   "libs/imgui/imgui_draw.cpp",
   "libs/imgui/imgui_tables.cpp",
   "libs/imgui/imgui_widgets.cpp",
   "libs/imgui/misc/freetype/imgui_freetype.cpp",
   "libs/imgui/backends/imgui_impl_sdl.cpp",
   "libs/imgui/backends/imgui_impl_opengl3.cpp",
]
imgui[:sources] |= Dir.glob("libs/freetype/src/**.{c,cpp}")

tools_gui = new_project("tools_gui")
tools_gui[:sources] |= FileList[
    "src/tools/gui/geometry/BezierCurveSegment2D.cpp",
    "src/tools/gui/geometry/BoxShape2D.cpp",
    "src/tools/gui/geometry/Rect.cpp",
    "src/tools/gui/geometry/SpatialNode2D.cpp",
    "src/tools/gui/geometry/TRSTransform2D.cpp",
    "src/tools/gui/Action.cpp",
    "src/tools/gui/ActionManager.cpp",
    "src/tools/gui/ActionManagerView.cpp",
    "src/tools/gui/App.cpp",
    "src/tools/gui/AppView.cpp",
    "src/tools/gui/Config.cpp",
    "src/tools/gui/FontManager.cpp",
    "src/tools/gui/ImGuiEx.cpp",
    "src/tools/gui/ViewState.cpp",
    "src/tools/gui/TextureManager.cpp",
]

tools_gui_example = new_project("tools-gui-example")
tools_gui_example[:sources] |= FileList[
    "src/tools/gui-example/AppExample.cpp",
    "src/tools/gui-example/AppExampleView.cpp",
    "src/tools/gui-example/main.cpp"
]

tools_gui_example[:sources] |= tools_core[:sources]
tools_gui_example[:sources] |= tools_gui[:sources]
tools_gui_example[:sources] |= gl3w[:sources]
tools_gui_example[:sources] |= lodepng[:sources]
tools_gui_example[:sources] |= imgui[:sources]

tools_gui_example[:includes] |= tools_core[:includes]
tools_gui_example[:includes] |= tools_gui[:includes]

ndbl_core = new_project("ndbl_core")
ndbl_core[:sources] |= FileList[
    "src/ndbl/core/language/Nodlang.cpp",
    "src/ndbl/core/language/Nodlang_biology.cpp",
    "src/ndbl/core/language/Nodlang_math.cpp",
    "src/ndbl/core/Code.cpp",
    "src/ndbl/core/Compiler.cpp",
    "src/ndbl/core/ComponentFactory.cpp",
    "src/ndbl/core/DirectedEdge.cpp",
    "src/ndbl/core/ForLoopNode.cpp",
    "src/ndbl/core/FunctionNode.cpp",
    "src/ndbl/core/Graph.cpp",
    "src/ndbl/core/IfNode.cpp",
    "src/ndbl/core/Instruction.cpp",
    "src/ndbl/core/Interpreter.cpp",
    "src/ndbl/core/LiteralNode.cpp",
    "src/ndbl/core/NodableHeadless.cpp",
    "src/ndbl/core/Node.cpp",
    "src/ndbl/core/NodeComponent.cpp",
    "src/ndbl/core/NodeFactory.cpp",
    "src/ndbl/core/Property.cpp",
    "src/ndbl/core/PropertyBag.cpp",
    "src/ndbl/core/Scope.cpp",
    "src/ndbl/core/Slot.cpp",
    "src/ndbl/core/SwitchBehavior.cpp",
    "src/ndbl/core/Token.cpp",
    #"src/ndbl/core/Token.specs.cpp",
    "src/ndbl/core/TokenRibbon.cpp",
    "src/ndbl/core/Utils.cpp",
    "src/ndbl/core/VariableNode.cpp",
    "src/ndbl/core/WhileLoopNode.cpp",
]

ndbl_gui = new_project("ndbl_gui")
ndbl_gui[:sources] |= FileList[
    "src/ndbl/gui/CreateNodeCtxMenu.cpp",
    "src/ndbl/gui/GraphView.cpp",
    "src/ndbl/gui/Nodable.cpp",
    #"src/ndbl/gui/benchmark.cpp",
    "src/ndbl/gui/Config.cpp",
    "src/ndbl/gui/File.cpp",
    "src/ndbl/gui/FileView.cpp",
    "src/ndbl/gui/History.cpp",
    "src/ndbl/gui/NodableView.cpp",
    "src/ndbl/gui/NodeView.cpp",
    "src/ndbl/gui/Physics.cpp",
    "src/ndbl/gui/PropertyView.cpp",
    "src/ndbl/gui/ScopeView.cpp",
    "src/ndbl/gui/SlotView.cpp",
]

ndbl_app = new_project("nodable")
ndbl_app[:sources] |= FileList[
    "src/ndbl/app/main.cpp",
]
ndbl_app[:sources] |= tools_core[:sources]
ndbl_app[:sources] |= tools_gui[:sources]
ndbl_app[:sources] |= ndbl_core[:sources]
ndbl_app[:sources] |= ndbl_gui[:sources]
ndbl_app[:sources] |= gl3w[:sources]
ndbl_app[:sources] |= lodepng[:sources]
ndbl_app[:sources] |= imgui[:sources]
ndbl_app[:sources] |= texteditor[:sources]

ndbl_app[:defines] .merge!({
    "NDBL_APP_NAME":       "\"nodable\"",
    "NDBL_APP_ASSETS_DIR": "\"assets\"",
    "NDBL_BUILD_REF":      "\"local\""
})

ndbl_cli = new_project("ndbl_cli")
ndbl_cli[:sources] |= FileList[
    "src/ndbl/cli/CLI.cpp",
    "src/ndbl/cli/main.cpp",
]
ndbl_cli[:sources] |= tools_core[:sources]
ndbl_cli[:sources] |= ndbl_core[:sources]

namespace :tools do

    project = tools_gui_example

    task :pack => [] do
        copy_build_to_install_dir(project)
    end

    task :run => [] do
        sh "exec #{BUILD_DIR}/#{project[:name]}" or raise "error"
    end

    task :build => [
        'libs:build_all',
        'objs'
    ] do
        build_executable_binary( project )
        copy_assets_to_build_dir( project )
    end

    multitask :objs => compile_objects( project )
end

namespace :ndbl do

    project = ndbl_app

    task :pack => [] do
        copy_build_to_install_dir(project)
    end

    task :run => [] do
        sh "exec #{BUILD_DIR}/#{project[:name]}" or raise "error"
    end

    task :build => [
        'libs:build_all',
        'objs'
    ] do
        build_executable_binary( project )
        copy_assets_to_build_dir( project )
    end

    task :deps => [
        'libs:nfd',
        'libs:freetype',
        'libs:sdl',
        'libs:cpptrace'
    ]

    multitask :objs => compile_objects( project )
end


########################################################################################################################

check_os_support()

task :default => :help

desc "says hello"
task :help do
    print("Welcome to Nodable's rakefile.\nFor more info, run: rake --tasks\n")
end

desc "Print Ruby version"
task :check do
    print "Ruby version is: "
    system "ruby -v"
end

desc "Install dependencies"
task :install => :check do
    if BUILD_OS.include?("linux")
        system "sudo apt-get update && sudo apt-get install libegl1-mesa-dev libdbus-1-dev libgtk-3-dev" or raise "Unable to install packages"
    elsif BUILD_OS.include?("darwin")
        system "brew install mesalib-glw" or raise "Unable to install packages"
    else
        puts "No dependencies to install (or unsupported OS)"
    end
end

task :build   => ['tools:build', 'ndbl:build']
task :pack    => ['tools:pack' , 'ndbl:pack']
task :run     => ['tools:run'  , 'ndbl:run']

task :clean do
    if File.exists?(INSTALL_DIR)
        FileUtils.remove_entry_secure INSTALL_DIR
    end
    if File.exists?(BUILD_DIR)
        FileUtils.remove_entry_secure BUILD_DIR
    end
    puts "Clean OK"
end