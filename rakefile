require "fileutils"
require "rbconfig"

########################################################################################################################

print RbConfig::CONFIG['target_os']

BUILD_OS           = RbConfig::CONFIG['build_os']
HOST_OS            = RbConfig::CONFIG['host_os']
TARGET_OS          = RbConfig::CONFIG['target_os']
BUILD_TYPE         = ENV["BUILD_TYPE"]      || "release"
BUILD_DIR          = ENV["BUILD_DIR"]       || "./rake-build-#{BUILD_TYPE}"
BINARY_DIR         = ENV["BINARY_DIR"]      || "./rake-out-#{BUILD_TYPE}"
OBJ_DIR            = ENV["OBJ_DIR"]         || "#{BUILD_DIR}/obj"

########################################################################################################################

def new_project(_name)
	{
	   name:          _name,
       sources:       FileList[],
       objects:       FileList[],
       includes:      FileList[
           "src",
           "src/gui",
           "src/tools",
           "libs",
           "libs/whereami/src",
           "libs/imgui",
           "libs/imgui",
           "libs/glm",
           "libs/gl3w/GL",
           "libs/gl3w",
           "libs/SDL/include",
           "libs/IconFontCppHeaders",
           "libs/nativefiledialog-extended/src/include",
           "libs/cpptrace",
           "libs/freetype/include"
       ],
       defines: {
           "IMGUI_USER_CONFIG": "\"tools/gui/ImGuiExConfig.h\"" # extend ImVec2 and ImVec4 constructors & more..
       },
       c_compiler:   "clang",
       cxx_compiler: "clang++"
    }
end

def compile_objects(project)

    # Generate object list
    project[:objects] = project[:sources].map{|src| src_to_obj(src)}

    # each obj depends on its src tasks
    project[:objects].each_with_index do |obj, index|
        src = project[:sources][index]
        file obj => src do
            compile_file( src, obj, project)
        end
    end

    project[:objects]
end

def src_to_obj(src_file)
	"#{OBJ_DIR}/#{src_file.ext("o")}"
end

def make_executable( project )
    objects = project[:objects].join(" ")
    binary = project[:name]
    system "clang++ -o #{binary} #{objects}  `pkg-config freetype2 --cflags --libs` `sdl2-config --cflags --libs` -v"
end

def compile_file(src_file, obj_file, project)
	puts "Compiling #{src_file} ..."
	FileUtils.mkdir_p File.dirname(obj_file)

    includes = project[:includes].map{|path| "-I#{path}"}.join(" ")
    defines  = project[:defines].map{|key,value| "-D#{key}='#{value}'" }.join(" ") # we add '' because "" are removed by the terminal

    if ( project[:c_compiler] != "clang" )
        raise "Not implemented"
    end
    if ( project[:cxx_compiler] != "clang++" )
        raise "Not implemented"
    end

    flags = [
        "-c", # obj only
        "-Wfatal-errors",
        #"-pedantic"
    ].join(" ")

    flags_cxx    = [
        "--std=c++20",
        "-fno-char8_t"
    ].join(" ")

    has_cxx_extension = [
        ".cpp",
        ".cc"
    ].include? File.extname( src_file )

    if has_cxx_extension
        system "#{project[:cxx_compiler]} #{flags} #{flags_cxx} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
    else
        system "#{project[:c_compiler]} #{flags} #{defines} #{includes} -o #{obj_file} #{src_file}" or raise("Unable to compile file!")
    end
end

def check_os_support()
    if not system "clang --version"
        raise "clang compiler is required, please install an retry."
    end
end

########################################################################################################################

check_os_support()

task :default => :help

desc "says hello"
task :help do
	print("Welcome to Nodable's rakefile.\nFor more info, run: rake --tasks\n")
end

desc "Install dependencies"
task :check do
    print "Ruby version is: "
    system "ruby -v"
end

desc "Install dependencies"
task :install => :check do
    if BUILD_OS.include?("linux")
        system "sudo apt-get update && sudo apt-get install libegl1-mesa-dev libdbus-1-dev libgtk-3-dev" or raise "Unable to install packages"
    elsif BUILD_OS.include?("darwin")
        system "brew install mesalib-glw" or raise "Unable to install packages"
    else
        puts "No dependencies to install (or unsupported OS)"
    end
end

task :clean do
    if File.exists?(BUILD_DIR)
        FileUtils.remove_entry_secure BUILD_DIR
    end
    puts "Clean OK"
end

########################################################################################################################

cpp_trace = new_project("cpp_trace")
cpp_trace[:sources] |= FileList[
   "src/binary/elf.cpp",
   "src/binary/mach-o.cpp",
   "src/binary/module_base.cpp",
   "src/binary/object.cpp",
   "src/binary/pe.cpp",
   "src/binary/safe_dl.cpp",
   "src/cpptrace.cpp",
   "src/ctrace.cpp",
   "src/exceptions.cpp",
   "src/from_current.cpp",
   "src/options.cpp",
   "src/utils.cpp",
   "src/demangle/demangle_with_cxxabi.cpp",
   "src/demangle/demangle_with_nothing.cpp",
   "src/demangle/demangle_with_winapi.cpp",
   "src/snippets/snippet.cpp",
   "src/symbols/dwarf/debug_map_resolver.cpp",
   "src/symbols/dwarf/dwarf_resolver.cpp",
   "src/symbols/symbols_core.cpp",
   "src/symbols/symbols_with_addr2line.cpp",
   "src/symbols/symbols_with_dbghelp.cpp",
   "src/symbols/symbols_with_dl.cpp",
   "src/symbols/symbols_with_libbacktrace.cpp",
   "src/symbols/symbols_with_libdwarf.cpp",
   "src/symbols/symbols_with_nothing.cpp",
   "src/unwind/unwind_with_dbghelp.cpp",
   "src/unwind/unwind_with_execinfo.cpp",
   "src/unwind/unwind_with_libunwind.cpp",
   "src/unwind/unwind_with_nothing.cpp",
   "src/unwind/unwind_with_unwind.cpp",
   "src/unwind/unwind_with_winapi.cpp",
   "src/utils/microfmt.cpp",
   "src/utils/utils.cpp",
   "src/platform/dbghelp_syminit_manager.cpp",
].map{|str| "libs/cpptrace/#{str}"}

cpp_trace[:includes] |= FileList[
    "libs/cpptrace/src",
    "libs/cpptrace/include"
]

tools_core = new_project("tools-core")
tools_core[:sources] |= FileList[
    "src/tools/core/reflection/qword.cpp",
    "src/tools/core/reflection/Type.cpp",
    "src/tools/core/reflection/TypeRegister.cpp",
    "src/tools/core/reflection/variant.cpp",
    "src/tools/core/memory/pointers.cpp",
    "src/tools/core/EventManager.cpp",
    "src/tools/core/FileSystem.cpp",
    "src/tools/core/format.cpp",
    "src/tools/core/log.cpp",
    "src/tools/core/StateMachine.cpp",
    "src/tools/core/System.cpp",
    "src/tools/core/TaskManager.cpp",
    "libs/whereami/src/whereami.c"
]

gl3w = new_project("gl3w")
gl3w[:sources] |= FileList[
    "libs/gl3w/GL/gl3w.c"
]

lodepng = new_project("lodepng")
lodepng[:sources] |= FileList[
    "libs/lodepng/lodepng.cpp"
]

sdl = new_project("sdl")
sdl[:sources] |= Dir.glob("libs/SDL/src/**.{c,cpp}")

imgui = new_project("imgui")
imgui[:sources] |= FileList[
   "libs/imgui/imgui.cpp",
   "libs/imgui/imgui_demo.cpp",
   "libs/imgui/imgui_draw.cpp",
   "libs/imgui/imgui_tables.cpp",
   "libs/imgui/imgui_widgets.cpp",
   "libs/imgui/misc/freetype/imgui_freetype.cpp",
   "libs/imgui/backends/imgui_impl_sdl.cpp",
   "libs/imgui/backends/imgui_impl_opengl3.cpp",
]
imgui[:sources] |= Dir.glob("libs/freetype/src/**.{c,cpp}")

tools_gui = new_project("tools-gui")
tools_gui[:sources] |= FileList[
    "src/tools/gui/geometry/BezierCurveSegment2D.cpp",
    "src/tools/gui/geometry/BoxShape2D.cpp",
    "src/tools/gui/geometry/Rect.cpp",
    "src/tools/gui/geometry/SpatialNode2D.cpp",
    "src/tools/gui/geometry/TRSTransform2D.cpp",
    "src/tools/gui/Action.cpp",
    "src/tools/gui/ActionManager.cpp",
    "src/tools/gui/ActionManagerView.cpp",
    "src/tools/gui/App.cpp",
    "src/tools/gui/AppView.cpp",
    "src/tools/gui/Config.cpp",
    "src/tools/gui/FontManager.cpp",
    "src/tools/gui/ImGuiEx.cpp",
    "src/tools/gui/ViewState.cpp",
    "src/tools/gui/TextureManager.cpp",
]

tools_gui_example = new_project("tools-gui-example")
tools_gui_example[:sources] |= FileList[
    "src/tools/gui-example/AppExample.cpp",
    "src/tools/gui-example/AppExampleView.cpp",
    "src/tools/gui-example/main.cpp"
]
tools_gui_example[:sources] |= cpp_trace[:sources]
tools_gui_example[:sources] |= tools_core[:sources]
tools_gui_example[:sources] |= tools_gui[:sources]
tools_gui_example[:sources] |= gl3w[:sources]
tools_gui_example[:sources] |= lodepng[:sources]
tools_gui_example[:sources] |= imgui[:sources]
# tools_gui_example[:sources] |= sdl[:sources]

tools_gui_example[:includes] |= cpp_trace[:includes]
tools_gui_example[:includes] |= tools_core[:includes]
tools_gui_example[:includes] |= tools_gui[:includes]

namespace :sdl do
    task :build => [] do
        commands = [
            'cd libs/SDL',
            'mkdir -p build',
            'cd build',
            '../configure',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end
end

namespace :freetype do
    task :build => [] do
        commands = [
            'cd libs/freetype',
            'mkdir -p build && cd build',
            'cmake ..',
            'make',
            'sudo make install'
        ]
        system commands.join(" && ")
    end
end

namespace :tools do
    task :build => 'link' do
        puts "Build done"
    end

    task :link => ['freetype:build', 'sdl:build', 'compile'] do
        make_executable( tools_gui_example )
        puts "Linking done"
    end

    desc "Build the tools gui app example"
    multitask :compile => compile_objects( tools_gui_example )
end