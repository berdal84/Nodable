name: Windows

on:
  workflow_dispatch:
  release:
    types:
      - created    
  push:
    branches: [master]
  pull_request:
    branches: [master]
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-2019]

    env:
      buildType: Release # possible options: MinSizeRel Release, Debug, RelWithDebInfo
    
    steps:

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
    
    - name: Git recursive checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Fetch tag (necessary in CMake)
      run: git pull --tag

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{env.buildType}}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{env.buildType}} --target install

    - name: CTest
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C ${{env.buildType}} --verbose  --output-on-failure

    - name: CPack
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack -C ${{env.buildType}}

    - name: Binary Artifact
      uses: actions/upload-artifact@v2
      with:
        name: nodable-${{ runner.os }}
        path: ${{runner.workspace}}/Nodable/out/app/*

    - name: Package Artifact
      uses: actions/upload-artifact@v2
      with:
        name: nodable-package-${{ runner.os }}
        path: |
          !${{runner.workspace}}/Nodable/out/package/_CPack_Packages
          ${{runner.workspace}}/Nodable/out/package/*.*
